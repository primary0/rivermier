// Generated by CoffeeScript 1.3.1

/*
Created by Jonathan Eatherly, (https://github.com/joneath)
MIT license
Version 0.1
*/


(function() {

  Backbone.InfiniScroll = function(collection, options) {
    var $target, fetchOn, page, prevScrollY,
      _this = this;
    if (options == null) {
      options = {};
    }
    fetchOn = false;
    page = 1;
    prevScrollY = 0;
    $target = null;
    this.options = _.defaults(options, {
      success: function() {},
      error: function() {},
      onFetch: function() {},
      target: $(window),
      param: "until",
      untilAttr: "id",
      pageSize: collection.length || 25,
      scrollOffset: 100,
      add: true,
      strict: false,
      includePage: false
    });
    this.destroy = function() {
      return $target.off("scroll", _this.watchScroll);
    };
    this.enableFetch = function() {
      return fetchOn = true;
    };
    this.disableFetch = function() {
      return fetchOn = false;
    };
    this.fetchSuccess = function(collection, response) {
      if ((_this.options.strict && collection.length >= (page + 1) * _this.options.pageSize) || (!_this.options.strict && response.length > 0)) {
        _this.enableFetch();
        page += 1;
      } else {
        _this.disableFetch();
      }
      return _this.options.success(collection, response);
    };
    this.fetchError = function(collection, response) {
      _this.enableFetch();
      return _this.options.error(collection, response);
    };
    this.watchScroll = function(e) {
      var docHeight, lastModel, scrollY;
      scrollY = $target.scrollTop() + $target.height();
      docHeight = $target.get(0).scrollHeight;
      if (!docHeight) {
        docHeight = $(document).height();
      }
      if (scrollY >= docHeight - _this.options.scrollOffset && fetchOn && prevScrollY <= scrollY) {
        lastModel = collection.last();
        if (!lastModel) {
          return;
        }
        _this.options.onFetch();
        _this.disableFetch();
        collection.fetch({
          success: _this.fetchSuccess,
          error: _this.fetchError,
          add: _this.options.add,
          data: _this.buildQueryParams(lastModel)
        });
      }
      return prevScrollY = scrollY;
    };
    this.buildQueryParams = function(model) {
      var params, _name;
      params = {};
      params[_this.options.param] = (typeof model[_name = _this.options.untilAttr] === "function" ? model[_name]() : void 0) ? model[_this.options.untilAttr]() : model.get(_this.options.untilAttr);
      if (_this.options.includePage) {
        params["page"] = page + 1;
      }
      return params;
    };
    (function() {
      $target = $(_this.options.target);
      fetchOn = true;
      page = 1;
      return $target.on("scroll", _this.watchScroll);
    })();
    return this;
  };

}).call(this);